from attr import attrs, attrib
from sklearn.externals import joblib
import os
import pandas as pd

from .model_builder import ModelBuilder
from . import cfg

# TODO: Estimator should select the most fitting model to use for a locale

@attrs
class Estimator(object):
    data = attrib()

    # Generated by predict function
    predictions = attrib(init=False)

    def predict(self, model_name, model_version):
        # If there are no cells, return empty dafaframe with model name as col
        if self.data is None:
            df = pd.DataFrame(columns=[model_name])
            return df
        elif len(self.data.index) == 0:
            df = pd.DataFrame(columns=[model_name])
            return df

        # Create prediction dataframe, without the "id" col
        predict_df = ModelBuilder.clean_cells(self.data, model_name)

        # Load model TODO: _sklearn is hardcoded
        clf_file = os.path.join(cfg.PATH_MODELS, 'model_{name}_{version}_sklearn.pkl'.format(name=model_name,
                                                                                             version=model_version))

        if not os.path.isfile(clf_file):
            raise ValueError('Model file is not found!')

        clf = joblib.load(clf_file)
        prob = clf.predict_proba(predict_df)

        # Add predictions for this model
        # self.predictions[model] = np.random.randint(0, 9, size=len(self.data))
        probabilities = prob[:, 1]
        predict_df[model_name] = probabilities

        # Make the estimations int values
        predict_df[model_name] = predict_df[model_name].apply(lambda x: x * 10)

        # Return a dataframe with the model name as a series with the predictions, and the cell ids as index
        return predict_df[[model_name]]
